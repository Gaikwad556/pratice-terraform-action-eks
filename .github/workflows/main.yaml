name: artfacts
on:
  workflow_dispatch:
    
env:
  AWS_REGION: us-east-1
  AWS_CLUSTER: cluster_eks
  ECR_REPO: vproapp

jobs:
  artifactsbuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: install maven
        id: mvn_install
        run: mvn install

      - name: mvn checkstyle
        id: checkstyle
        run: mvn checkstyle:checkstyle

      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      - name: code analysis
        id: analysis
        run: sonar-scanner
           -Dsonar.host.url=${{ secrets.SONAR_URL }}
           -Dsonar.login=${{ secrets.SONAR_TOKEN }}
           -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
           -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY}}
           -Dsonar.sources=src/ 
           -Dsonar.junit.reportsPath=target/surefire-reports/
           -Dsonar.jacoco.reportsPath=target/jacoco.exec
           -Dsonar.java.checkstyle.reportsPath=target/checkstyle-result.xml
           -Dsonar.java.binaries=target/test-classes/com/visualpathit/account

      - name: quality gate
        id: gate
        if: steps.analysis.outcome == 'success'
        uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}

  build_and_run:
    runs-on: ubuntu-latest
    needs: artifactsbuild
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.ACCESS_KEY}}
          secret_key: ${{ secrets.SECRET_KEY }}
          registry: ${{ secrets.URL_ECR }}
          # cache_from: ${{ secrets.cache }}
          repo: ${{env.ECR_REPO}}
          region: ${{env.AWS_REGION}}
          tags: ${{ github.run_number}}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./

  helm:
    runs-on: ubuntu-latest
    needs: build_and_run
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: aws config 
        id: config
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: 'us-east-1'
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRET_KEY }}

      - name: cluster 
        id: eks
        if: steps.config.outcome == 'success'
        run: aws eks update-kubeconfig --region ${{env.AWS_REGION}} --name ${{env.AWS_CLUSTER}}

      - name: login to ecr
        run: kubectl create secret docker-registry regsecret --docker-server=${{secrets.URL_ECR}} --docker-username=AWS --docker-password=$(aws ecr get-login-password) 

      - name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.10
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{env.AWS_REGION}}
          cluster-name: ${{env.AWS_CLUSTER}}
          # config-files: .github/values/dev.yaml
          chart-path: vprofilecharts/
          namespace: default
          values: vproname=${{secrets.URL_ECR}}/${{env.ECR_REPO}},vpronumber=${{github.run_number}}
          name: vpro-file
              
        

    